const getCounterArrowBalanance = (str: string): number => {
    let counter = 0;
    for (let i = 0; i < str.length; ++i) {
      if (str[i] == "<") counter++;
      if (str[i] == ">") counter--;
    }
    return counter;
  };

  const extractKeyValueFromRefString = (
    str: string
  ): { key: string; value: string } => {
    let key = "";
    let i = 0;
    while (str[i] != "<") {
      key += str[i++];
    }
    let value = "";
    let counter = 1;
    i++;
    while (i < str.length) {
      if (str[i] == "<") counter++;
      if (str[i] == ">") counter--;
      if (counter >= 1) {
        value += str[i];
      }
      i++;
    }
    return {
      key,
      value,
    };
  };

  const splitPath = (str: string): Array<string> => {
    let out: Array<string> = [];
    let arrowBalance = 0;
    let curr = "";
    for (let i = 0; i <= str.length; ++i) {
      if (i == str.length) {
        out.push(curr);
        continue;
      }
      if (arrowBalance == 0 && str[i] == ".") {
        out.push(curr);
        curr = "";
        continue;
      }
      if (str[i] == "<") {
        arrowBalance++;
      }
      if (str[i] == ">") {
        arrowBalance--;
      }
      curr += str[i];
    }
    return out;
  };

  const decodeSchemaPathWithArrays = (
    pathString: string
  ): Array<{ key: string; value: string } | string | number> => {
    return splitPath(pathString).map((part) => {
      if (/^\[(\d+)\]$/.test(part)) {
        return parseInt((/^\[(\d+)\]$/.exec(part) as Array<string>)[1]);
      }
      if (/^(.+)<(.+)>$/.test(part) && getCounterArrowBalanance(part) == 0) {
        const { key, value } = extractKeyValueFromRefString(part);
        return {
          key,
          value,
        };
      }
      return part;
    });
  };

  interface StateObject {
    [key: string | number]: string | StateObject | number | null;
  }

  const getObjectInStateMap = (
    stateMap: { [pluginName: string]: object },
    path: string
  ): StateObject | null => {
    let current: null | StateObject = null;
    const [pluginWrapper, ...decodedPath] = decodeSchemaPathWithArrays(path);
    const pluginName = /^\$\((.+)\)$/.exec(pluginWrapper as string)?.[1] ?? null;
    if (pluginName == null) {
      return null;
    }
    current = stateMap[pluginName] as StateObject | null;
    for (const part of decodedPath) {
      if (!current) {
        return null;
      }
      if (typeof part == "number") {
        current = current[part] as StateObject;
      } else if (typeof part != "string") {
        const { key, value } = part as { key: string; value: string };
        if (Array.isArray(current)) {
          const element = current?.find?.((v) => v?.[key] == value);
          current = element;
        } else {
          return null;
        }
      } else {
        current = current[part] as StateObject;
      }
    }
    return current ?? null;
  };

  export const replaceRefVarsWithWildcards = (pathString: string): string => {
    const path = splitPath(pathString);
    return path
      .map((part) => {
        if (/^(.+)<(.+)>$/.test(part)) {
          const { key } = extractKeyValueFromRefString(part);
          return `${key}<?>`;
        }
        return part;
      })
      .join(".");
  };

  export function containsDiffable(
    changeset: Set<string>,
    query: PartialDiffableQuery,
    fuzzy: boolean
  ): boolean;
  export function containsDiffable(
    changeset: Set<string>,
    query: DiffableQuery,
    fuzzy: boolean
  ): boolean;
  export function containsDiffable(
    changeset: Set<string>,
    query: PartialDiffableQuery | DiffableQuery,
    fuzzy: boolean
  ) {
    if (!fuzzy) {
      return changeset.has(query);
    }
    for (let value of changeset) {
      if (value.startsWith(query)) {
        return true;
      }
    }
    return false;
  }

  const getIndexPathInStateMap = (
    stateMap: { [pluginName: string]: object },
    path: string
  ): Array<string | number> | null => {
    let current: null | StateObject = null;
    const [pluginWrapper, ...decodedPath] = decodeSchemaPathWithArrays(path);
    const pluginName = /^\$\((.+)\)$/.exec(pluginWrapper as string)?.[1] ?? null;
    const indexPath: Array<string | number> = [];
    if (pluginName == null) {
      return null;
    }
    indexPath.push(pluginName);
    current = stateMap[pluginName] as StateObject;
    for (const part of decodedPath) {
      if (!current) {
        return null;
      }
      if (typeof part == "number") {
        current = current[part] as StateObject;
        indexPath.push(part);
      } else if (typeof part != "string") {
        const { key, value } = part as { key: string; value: string };
        if (Array.isArray(current)) {
          const element = current?.find?.((v, index) => {
            if (v?.[key] == value) {
              indexPath.push(index);
              return true;
            }
            return false;
          }) as StateObject;
          current = element;
        } else {
          return null;
        }
      } else {
        indexPath.push(part);
        current = current[part] as StateObject;
      }
    }
    return indexPath;
  };

  const updateObjectInStateMap = (
    stateMap: { [pluginName: string]: StateObject },
    path: string,
    objectToUpdate: StateObject
  ) => {
    const indexPath = getIndexPathInStateMap(stateMap, path);
    if (indexPath == null) {
      return null;
    }
    let current: StateObject | null = stateMap;
    let last!: StateObject | Array<object>;
    for (let i = 0; i < indexPath.length; ++i) {
      last = current;
      const index = indexPath[i] as string;
      current = current[index] as StateObject;
    }
    if (!last) {
      return stateMap;
    }
    const index = indexPath[indexPath.length - 1] as number;
    last[index] = objectToUpdate;
    return stateMap;
  };

  export type StringDiff = {
    add: {
      [key: number]: string;
    };
    remove: {
      [key: number]: string;
    };
  };

  export type Diff = {
    add: {
      [key: string]: DiffElement;
    };
    remove: {
      [key: string]: DiffElement;
    };
  };

  export interface DiffElement {
    key: string;
    value: any;
  }

  const fastHash = (str: string) => {
    let hash = 0;
    let hash2 = 0;
    for (let i = 0; i < str.length; i++) {
      hash = (hash * hash2) ^ ((hash << 5) - hash + str.charCodeAt(i));
      hash2 = (hash2 << 5) - hash + str.charCodeAt(i);
      hash |= 0;
      hash2 |= 0;
    }
    return hash.toString(36).padEnd(6) + hash2.toString(36).padEnd(6);
  };

  export const getLCS = (
    left: Array<string>,
    right: Array<string>
  ): Array<string> => {
    const diff = mdiff(left, right);
    const lcs = diff.getLcs();
    return lcs ?? [];
  };

  export const getArrayStringDiff = (
    past: Array<string>,
    present: Array<string>
  ): StringDiff => {
    const longestSequence = getLCS(past, present);

    let diff: StringDiff = {
      add: {},
      remove: {},
    };

    for (let i = 0, removeIndex = 0; i < past.length; ++i) {
      if (longestSequence[removeIndex] == past[i]) {
        removeIndex++;
      } else {
        diff.remove[i] = past[i];
      }
    }

    for (let i = 0, addIndex = 0; i < present.length; ++i) {
      if (longestSequence[addIndex] == present[i]) {
        addIndex++;
      } else {
        diff.add[i] = present[i];
      }
    }
    return diff;
  };

  export const getRowHash = (obj: {
    key: string;
    value: {
      [key: string]: number | string | boolean | Array<number | string | boolean>;
    };
  }): string => {
    return fastHash(obj.key + JSON.stringify(obj.value));
  };

  export const getDiff = (
    before: Array<DiffElement>,
    after: Array<DiffElement>
  ): Diff => {
    const past = before.map(getRowHash);
    const present = after.map(getRowHash);
    const longestSequence = getLCS(past, present);
    let removeIndex = 0;
    let diff: Diff = {
      add: {},
      remove: {},
    };
    for (let i = 0; i < past.length; ++i) {
      if (longestSequence[removeIndex] == past[i]) {
        removeIndex++;
      } else {
        diff.remove[i] = before[i];
      }
    }

    let addIndex = 0;
    for (let i = 0; i < present.length; ++i) {
      if (longestSequence[addIndex] == present[i]) {
        addIndex++;
      } else {
        diff.add[i] = after[i];
      }
    }
    return diff;
  };

  export interface ManifestNode {
    type: string;
    isKey?: boolean;
    values?: string | TypeStruct;
    ref?: string;
    refKeyType?: string;
    refType?: string;
    nullable?: boolean;
    emptyable?: boolean;
    bounded?: boolean;
    manualOrdering?: boolean;
    onDelete?: "delete" | "nullify";
    default?: unknown | Array<unknown>;
  }

  export interface TypeStruct {
    [key: string]: ManifestNode | TypeStruct;
  }

  export interface Manifest {
    version: string;
    name: string;
    displayName: string;
    description?: string;
    codeDocsUrl?: string;
    codeRepoUrl?: string;
    managedCopy?: boolean;
    icon:
      | string
      | {
          light: string;
          dark: string;
          selected?:
            | string
            | {
                dark?: string;
                light?: string;
              };
        };
    imports: {
      [name: string]: string;
    };
    types: TypeStruct;
    store: TypeStruct;
    seed?: unknown;
  }

  const primitives = new Set(["int", "float", "boolean", "string", "file"]);

  const writePathString = (pathParts: Array<DiffElement | string>): string => {
    return pathParts
      .map((part) => {
        if (typeof part == "string") {
          return part;
        }
        return `${part.key}<${part.value}>`;
      })
      .join(".");
  };

  const generateKVFromStateWithRootSchema = (
    rootSchema: TypeStruct,
    pluginName: string,
    state: object
  ): Array<DiffElement> => {
    const flattenedState = flattenStateToSchemaPathKV(
      rootSchema as unknown as TypeStruct,
      state as StateObject,
      [`$(${pluginName})`]
    );
    return (
      flattenedState?.map?.(({ key, value }) => {
        return {
          key: writePathString(key as unknown as Array<string | DiffElement>),
          value,
        };
      }) ?? []
    );
  };

  const generateKVState = (rootSchema: TypeStruct, state: StateObject) => {
    const out: Array<DiffElement> = [];
    for (const pluginName in rootSchema) {
      out.push(
        ...generateKVFromStateWithRootSchema(
          rootSchema[pluginName] as TypeStruct,
          pluginName,
          state[pluginName] as StateObject
        )
      );
    }
    return out;
  };

  const getStateId = (schema: TypeStruct, state: StateObject): string => {
    const hashPairs: Array<DiffElement> = [];
    const sortedProps = Object.keys(schema).sort();
    for (const prop of sortedProps) {
      if (!schema[prop].type) {
        hashPairs.push({
          key: prop,
          value: getStateId(
            schema[prop] as TypeStruct,
            state[prop] as StateObject
          ),
        });
      }
      if (primitives.has(schema[prop].type as string)) {
        hashPairs.push({
          key: prop,
          value: fastHash(`${state[prop]}`),
        });
      }
      if (schema[prop].type == "set" || schema[prop].type == "array") {
        hashPairs.push({
          key: prop,
          value: (state[prop] as unknown as Array<StateObject>)?.reduce(
            (s: string, element: object) => {
              if (
                typeof schema[prop].values == "string" &&
                primitives.has(schema[prop].values as string)
              ) {
                return fastHash(s + `${element}`);
              }
              return fastHash(
                s +
                  getStateId(
                    schema[prop].values as TypeStruct,
                    element as StateObject
                  )
              );
            },
            ""
          ),
        });
      }
    }
    return fastHash(
      hashPairs.reduce((s, { key, value }) => {
        if (key == "(id)") {
          return s;
        }
        if (s == "") {
          return `${key}:${value}`;
        }
        return s + "/" + `${key}:${value}`;
      }, "")
    );
  };

  const flattenStateToSchemaPathKV = (
    schemaRoot: TypeStruct,
    state: StateObject,
    traversalPath: Array<string | DiffElement>
  ): Array<{
    key: string | Array<string | DiffElement>;
    value: unknown;
  }> => {
    const kv: Array<{
      key: string | Array<string | DiffElement>;
      value: unknown;
    }> = [];
    const sets: Array<string> = [];
    const arrays: Array<string> = [];
    const nestedStructures: Array<string> = [];
    const value: StateObject = {};
    let primaryKey: null | DiffElement = null;
    const sortedProps = Object.keys(schemaRoot).sort();
    for (const prop of sortedProps) {
      if ((schemaRoot as unknown as { [key: string]: TypeStruct })[prop].isKey) {
        primaryKey = {
          key: prop,
          value: state[prop],
        };
      }

      if (
        schemaRoot[prop]?.type == "set" &&
        !primitives.has(schemaRoot[prop].values as string)
      ) {
        sets.push(prop);
        continue;
      }
      if (
        schemaRoot[prop]?.type == "array" &&
        !primitives.has(schemaRoot[prop].values as string)
      ) {
        arrays.push(prop);
        continue;
      }
      if (
        !primitives.has(schemaRoot[prop]?.type as string) &&
        !(
          (schemaRoot[prop]?.type == "array" ||
            schemaRoot[prop]?.type == "set") &&
          primitives.has(schemaRoot[prop]?.values as string)
        ) &&
        schemaRoot[prop]?.type != "ref"
      ) {
        nestedStructures.push(prop);
        continue;
      }
      value[prop] = state[prop] as StateObject;
    }

    kv.push({
      key: [...traversalPath, ...(primaryKey ? [primaryKey] : [])],
      value,
    });

    for (const prop of nestedStructures) {
      kv.push(
        ...flattenStateToSchemaPathKV(
          schemaRoot[prop] as TypeStruct,
          state[prop] as StateObject,
          [...traversalPath, ...(primaryKey ? [primaryKey] : []), prop]
        )
      );
    }
    for (const prop of arrays) {
      ((state?.[prop] as unknown as Array<StateObject>) ?? []).forEach(
        (element) => {
          const id = getStateId(schemaRoot[prop].values as TypeStruct, element);
          kv.push(
            ...flattenStateToSchemaPathKV(
              schemaRoot[prop].values as TypeStruct,
              { ...element, ["(id)"]: id },
              [...traversalPath, ...(primaryKey ? [primaryKey] : []), prop]
            )
          );
        }
      );
    }
    for (const prop of sets) {
      ((state?.[prop] as unknown as Array<StateObject>) ?? []).forEach(
        (element) => {
          kv.push(
            ...flattenStateToSchemaPathKV(
              schemaRoot[prop].values as TypeStruct,
              element,
              [...traversalPath, ...(primaryKey ? [primaryKey] : []), prop]
            )
          );
        }
      );
    }
    return kv;
  };

  export const reIndexSchemaArrays = (kvs: Array<DiffElement>): Array<string> => {
    const out: Array<string> = [];
    const indexMap: { [path: string]: number } = {};
    for (const { key } of kvs) {
      const decodedPath = decodeSchemaPath(key);
      const parts: Array<string | DiffElement> = [];
      const indexStack: Array<number> = [];
      for (const part of decodedPath) {
        if (typeof part == "object" && part.key == "(id)") {
          const parentPathString = writePathString(parts);
          if (!indexMap[parentPathString]) {
            indexMap[parentPathString] = 0;
          } else {
            indexMap[parentPathString]++;
          }
          indexStack.push(indexMap[parentPathString]);
        }
        parts.push(part);
      }
      let pathIdx = 0;
      const pathWithNumbers = decodedPath.map((part) => {
        if (typeof part == "object" && part.key == "(id)") {
          return indexStack[pathIdx++];
        }
        return part;
      });
      const arrayPath = writePathStringWithArrays(pathWithNumbers);
      out.push(arrayPath);
    }
    return out;
  };

  export const decodeSchemaPath = (
    pathString: string
  ): Array<DiffElement | string> => {
    return splitPath(pathString).map((part) => {
      if (/^(.+)<(.+)>$/.test(part) && getCounterArrowBalanance(part) == 0) {
        const { key, value } = extractKeyValueFromRefString(part);
        return {
          key,
          value,
        };
      }
      return part;
    });
  };

  export const writePathStringWithArrays = (
    pathParts: Array<DiffElement | string | number>
  ): string => {
    return pathParts
      .map((part) => {
        if (typeof part == "string") {
          return part;
        }
        if (typeof part == "number") {
          return `[${part}]`;
        }
        return `${part.key}<${part.value}>`;
      })
      .join(".");
  };

  const getNextApplicationState = (
    currentApplicationState: { [key: string]: object },
    nextApplicationState: { [key: string]: object },
    rootSchemaMap: TypeStruct,
    lastEditKey: React.MutableRefObject<null | string>,
    isStale: boolean
  ): SchemaRoot | null => {
    try {
      if (!currentApplicationState && !nextApplicationState) {
        return null;
      }
      if (!currentApplicationState) {
        return nextApplicationState as SchemaRoot;
      }
      if (!nextApplicationState) {
        return currentApplicationState as SchemaRoot;
      }
      const key = lastEditKey.current;
      const nextKV = generateKVState(
        rootSchemaMap,
        nextApplicationState as StateObject
      );
      const currentKV = generateKVState(
        rootSchemaMap,
        currentApplicationState as StateObject
      );
      if (key) {
        const nextReindexedKeys = reIndexSchemaArrays(nextKV);
        const currentReindexedKeys = reIndexSchemaArrays(currentKV);
        let nextKeyIndex = -1;
        for (let i = 0; i < nextReindexedKeys.length; ++i) {
          if (key.startsWith(nextReindexedKeys[i])) {
            nextKeyIndex = i;
          }
        }
        let currentKeyIndex = -1;
        for (let i = 0; i < currentReindexedKeys.length; ++i) {
          if (key.startsWith(currentReindexedKeys[i])) {
            currentKeyIndex = i;
          }
        }
        if (
          nextKeyIndex != -1 &&
          currentKeyIndex != -1 &&
          nextKeyIndex == currentKeyIndex
        ) {
          const currentKey = nextReindexedKeys[nextKeyIndex];
          const nextKey = currentReindexedKeys[currentKeyIndex];
          const object = getObjectInStateMap(
            currentApplicationState,
            currentKey + key.substring(currentKey.length)
          );
          const nextObject = getObjectInStateMap(
            nextApplicationState,
            nextKey + key.substring(nextKey.length)
          );
          let pastKeyCount = 0;
          let nextKeyCount = 0;
          let pastKeys = new Set<string>();
          for (let i = 0; i < currentReindexedKeys.length; ++i) {
            const k = currentReindexedKeys[i];
            pastKeys.add(k);
            pastKeyCount++;
          }
          let hasAllKeys = true;
          for (let i = 0; i < nextReindexedKeys.length; ++i) {
            const k = nextReindexedKeys[i];
            if (!pastKeys.has(k)) {
              hasAllKeys = false;
              break;
            }
            nextKeyCount++;
          }
          hasAllKeys = hasAllKeys && pastKeyCount == nextKeyCount;
          if (
            hasAllKeys &&
            object &&
            nextObject &&
            JSON.stringify(object) != JSON.stringify(nextObject)
          ) {
            if (isStale) {
              return currentApplicationState as SchemaRoot;
            }
            return updateObjectInStateMap(
              nextApplicationState as unknown as { [key: string]: StateObject },
              key as string,
              object as unknown as StateObject
            ) as unknown as SchemaRoot;
          }
          if (hasAllKeys && !isStale) {
            return currentApplicationState as SchemaRoot;
          }
        }
      }
      const diff = getDiff(currentKV, nextKV);
      if (
        Object.keys(diff.add).length == 0 &&
        Object.keys(diff.remove).length == 0
      ) {
        return currentApplicationState as SchemaRoot;
      }
      return nextApplicationState as SchemaRoot;
    } catch (e) {
      return nextApplicationState as SchemaRoot;
    }
  };